/// <reference types="node" />
import EventEmitter from "events";
export declare class ScratchCloud {
    private loginData;
    private sessionId;
    private token;
    protected valid: boolean;
    constructor();
    login(username: string, password: string): Promise<void>;
    createSession(project: string | number, turbowarp?: boolean): ScratchCloud.Session;
}
export declare namespace ScratchCloud {
    const cloudPrefix = "\u2601 ";
    class Session extends EventEmitter {
        private userData;
        private projectId;
        private turbowarp;
        private connectionAttempts;
        private queuedPackets;
        protected maxCharacters: number;
        private connection;
        protected variables: {
            [key: string]: string | number;
        };
        protected autoPrefix: boolean;
        constructor(userData: {
            username: string;
            sessionId: string;
        }, projectId: string | number, turbowarp?: boolean);
        private open;
        private exponentialTimeout;
        private randomizeDuration;
        private createPacket;
        private sendPacket;
        private handlePacket;
        private onOpen;
        private onMessage;
        private onClose;
        private onError;
        set(name: string, value: string | number): void;
        get(name: string): string | undefined;
        enableAutoPrefix(): void;
        disableAutoPrefix(): void;
        on(eventName: "open", listener: () => void): this;
        on(eventName: "close", listener: () => void): this;
        on(eventName: "error", listener: (err: Error) => void): this;
        on(eventName: "set", listener: (name: string, value: string) => void): this;
        on(eventName: "addvariable", listener: (name: string, value: string) => void): this;
        on(eventName: "setup", listener: () => void): this;
        once(eventName: "open", listener: () => void): this;
        once(eventName: "close", listener: () => void): this;
        once(eventName: "error", listener: (err: Error) => void): this;
        once(eventName: "set", listener: (name: string, value: string) => void): this;
        once(eventName: "addvariable", listener: (name: string, value: string) => void): this;
        once(eventName: "setup", listener: () => void): this;
    }
}
